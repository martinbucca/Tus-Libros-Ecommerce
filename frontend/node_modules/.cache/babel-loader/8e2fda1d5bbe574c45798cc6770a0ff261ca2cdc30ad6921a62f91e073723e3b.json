{"ast":null,"code":"import { Requester } from \"./Requester\";\nimport { UnexpectedErrorResponse } from \"../responses/generalResponses/UnexpectedErrorResponse\";\nclass RemoteRequester extends Requester {\n  constructor(url, authorizationManager) {\n    super();\n    this._baseUrl = url;\n    this._authorizationManager = authorizationManager;\n  }\n  call({\n    endpoint,\n    data = undefined\n  }) {\n    const request = this._buildRequest(endpoint, data);\n    let url = endpoint.url();\n    if (endpoint.isGetMethod() && data) {\n      url += \"?\" + this._dataToQueryString(data);\n    }\n    return fetch(this._baseUrl + url, request).then(result => {\n      return result.text();\n    }).then(contentResponse => {\n      return this._buildResponse(contentResponse, endpoint);\n    });\n  }\n  _buildRequest(endpoint, data) {\n    let headers = this._buildHeadersFor(endpoint);\n    let requestOptions = {\n      method: endpoint.method(),\n      headers: headers,\n      credentials: 'include' // include cookie credentials\n    };\n\n    if (endpoint.method() !== 'GET') {\n      let encoder = this._encoderFor(endpoint.contentType());\n      Object.assign(headers, encoder.headers());\n      Object.assign(requestOptions, {\n        body: encoder.encode(data)\n      });\n    }\n    return requestOptions;\n  }\n  _buildResponse(aRawResponse, endpoint) {\n    const availableResponsesForEndpoint = endpoint.responses();\n    for (let responseType of availableResponsesForEndpoint) {\n      if (responseType.understandThis(aRawResponse)) {\n        return new responseType(aRawResponse);\n      }\n    }\n    return new UnexpectedErrorResponse(aRawResponse);\n  }\n  _buildHeadersFor(endpoint) {\n    let headers = {};\n    if (endpoint.contentType() && endpoint.contentType() !== \"multipart/form-data\") {\n      headers['Content-Type'] = endpoint.contentType();\n    }\n    if (endpoint.needsAuthorization()) {\n      headers['Authorization'] = 'Token ' + this._authorizationManager.token();\n    }\n    return headers;\n  }\n  _dataToQueryString(data) {\n    let keyValuePairs = [];\n    for (let i = 0; i < Object.keys(data).length; i += 1) {\n      let key = Object.keys(data)[i];\n      let value = Object.values(data)[i];\n      keyValuePairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n    }\n    return keyValuePairs.join('&');\n  }\n  _encoderFor(contentType) {\n    let encoders = [new JsonEncoder(), new MultiPartEncoder()];\n    return encoders.find(enc => enc.accepts(contentType));\n  }\n}\nclass Encoder {\n  accepts(mimeType) {\n    throw new Error(\"You have to implement the method\");\n  }\n  headers() {\n    throw new Error(\"You have to implement the method\");\n  }\n  encode(requestBody) {\n    throw new Error(\"You have to implement the method\");\n  }\n}\nclass MultiPartEncoder extends Encoder {\n  accepts(mimeType) {\n    return mimeType === 'multipart/form-data';\n  }\n  headers() {\n    return {};\n  }\n  encode(requestBody) {\n    let formData = new FormData();\n    this._convertModelToFormData(requestBody, formData, '');\n    return formData;\n  }\n  _isAList(value) {\n    return Array.isArray(value);\n  }\n  _isAListOfFiles(value) {\n    return this._isAList(value) && value.every(aPotencialFile => aPotencialFile instanceof File);\n  }\n  _addListToData(aList, field, formData) {\n    // Django no interpreta correctamente las lista de jsons. Por eso el uso de stringify\n    // aList.forEach((item, index) => {\n    //     this._convertModelToFormData(item, formData, `${field}[${index}]`);\n    // })\n    formData.append(field, JSON.stringify(aList));\n    return formData;\n  }\n  _addFilesToData(files, field, formData) {\n    files.forEach((file, index) => {\n      const fieldName = field !== '' ? field : index.toString();\n      formData.append(fieldName, file, file.name);\n    });\n    return formData;\n  }\n  _convertModelToFormData(value, formData, namespace) {\n    if (value !== undefined) {\n      if (value instanceof Date) {\n        formData.append(namespace, value.toISOString());\n      } else if (this._isAListOfFiles(value)) {\n        this._addFilesToData(value, namespace, formData);\n      } else if (value instanceof Array) {\n        this._addListToData(value, namespace, formData);\n      } else if (typeof value === 'object' && !(value instanceof File)) {\n        for (let propertyName in value) {\n          this._convertModelToFormData(value[propertyName], formData, namespace ? `${namespace}[${propertyName}]` : propertyName);\n        }\n      } else if (value instanceof File) {\n        formData.append(namespace, value, value.name);\n      } else {\n        formData.append(namespace, value.toString());\n      }\n    }\n    return formData;\n  }\n}\nclass JsonEncoder extends Encoder {\n  accepts(mimeType) {\n    return mimeType === 'application/json';\n  }\n  headers() {\n    return {\n      'Content-Type': 'application/json'\n    };\n  }\n  encode(requestBody) {\n    return JSON.stringify(requestBody);\n  }\n}\nexport default RemoteRequester;","map":{"version":3,"names":["Requester","UnexpectedErrorResponse","RemoteRequester","constructor","url","authorizationManager","_baseUrl","_authorizationManager","call","endpoint","data","undefined","request","_buildRequest","isGetMethod","_dataToQueryString","fetch","then","result","text","contentResponse","_buildResponse","headers","_buildHeadersFor","requestOptions","method","credentials","encoder","_encoderFor","contentType","Object","assign","body","encode","aRawResponse","availableResponsesForEndpoint","responses","responseType","understandThis","needsAuthorization","token","keyValuePairs","i","keys","length","key","value","values","push","encodeURIComponent","join","encoders","JsonEncoder","MultiPartEncoder","find","enc","accepts","Encoder","mimeType","Error","requestBody","formData","FormData","_convertModelToFormData","_isAList","Array","isArray","_isAListOfFiles","every","aPotencialFile","File","_addListToData","aList","field","append","JSON","stringify","_addFilesToData","files","forEach","file","index","fieldName","toString","name","namespace","Date","toISOString","propertyName"],"sources":["/Users/martin/FIUBA/Ingenieria de Software I/tus-libros/frontend/src/lib/communication/src/requester/RemoteRequester.js"],"sourcesContent":["import {Requester} from \"./Requester\";\nimport {UnexpectedErrorResponse} from \"../responses/generalResponses/UnexpectedErrorResponse\";\n\nclass RemoteRequester extends Requester {\n    constructor(url, authorizationManager) {\n        super();\n        this._baseUrl = url;\n        this._authorizationManager = authorizationManager;\n    }\n\n    call({endpoint, data = undefined}) {\n        const request = this._buildRequest(endpoint, data);\n        let url = endpoint.url();\n        if (endpoint.isGetMethod() && data) {\n            url += \"?\" + this._dataToQueryString(data);\n        }\n\n        return fetch(this._baseUrl + url, request).then(result => {\n            return result.text()\n        })\n            .then(contentResponse => {\n                return this._buildResponse(contentResponse, endpoint)\n            })\n    }\n\n    _buildRequest(endpoint, data) {\n        let headers = this._buildHeadersFor(endpoint);\n        let requestOptions = {\n            method: endpoint.method(),\n            headers: headers,\n            credentials: 'include', // include cookie credentials\n        };\n\n        if (endpoint.method() !== 'GET') {\n            let encoder = this._encoderFor(endpoint.contentType());\n            Object.assign(headers, encoder.headers());\n            Object.assign(requestOptions, {body: encoder.encode(data)});\n        }\n\n        return requestOptions;\n    }\n\n    _buildResponse(aRawResponse, endpoint) {\n        const availableResponsesForEndpoint = endpoint.responses();\n        for (let responseType of availableResponsesForEndpoint) {\n            if (responseType.understandThis(aRawResponse)) {\n                return new responseType(aRawResponse);\n            }\n        }\n        return new UnexpectedErrorResponse(aRawResponse);\n    }\n\n    _buildHeadersFor(endpoint) {\n        let headers = {};\n        if (endpoint.contentType() && endpoint.contentType() !== \"multipart/form-data\") {\n            headers['Content-Type'] = endpoint.contentType();\n        }\n\n        if (endpoint.needsAuthorization()) {\n            headers['Authorization'] = 'Token ' + this._authorizationManager.token();\n        }\n\n        return headers;\n    }\n\n    _dataToQueryString(data) {\n        let keyValuePairs = [];\n        for (let i = 0; i < Object.keys(data).length; i += 1) {\n            let key = Object.keys(data)[i];\n            let value = Object.values(data)[i];\n            keyValuePairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n        return keyValuePairs.join('&');\n    }\n\n    _encoderFor(contentType) {\n        let encoders = [new JsonEncoder(), new MultiPartEncoder()];\n        return encoders.find(enc => enc.accepts(contentType));\n    }\n}\n\nclass Encoder {\n    accepts(mimeType) {\n        throw new Error(\"You have to implement the method\");\n    }\n\n    headers() {\n        throw new Error(\"You have to implement the method\");\n    }\n\n    encode(requestBody) {\n        throw new Error(\"You have to implement the method\");\n    }\n}\n\nclass MultiPartEncoder extends Encoder {\n    accepts(mimeType) {\n        return mimeType === 'multipart/form-data'\n    }\n\n    headers() {\n        return {}\n    }\n\n    encode(requestBody) {\n        let formData = new FormData();\n        this._convertModelToFormData(requestBody, formData, '');\n        return formData;\n    }\n\n    _isAList(value) {\n        return Array.isArray(value)\n    }\n\n    _isAListOfFiles(value) {\n        return this._isAList(value) && value.every((aPotencialFile) => aPotencialFile instanceof File)\n    }\n\n    _addListToData(aList, field, formData) {\n        // Django no interpreta correctamente las lista de jsons. Por eso el uso de stringify\n        // aList.forEach((item, index) => {\n        //     this._convertModelToFormData(item, formData, `${field}[${index}]`);\n        // })\n        formData.append(field, JSON.stringify(aList));\n        return formData\n    }\n\n    _addFilesToData(files, field, formData) {\n        files.forEach( (file, index) => {\n            const fieldName = field !== '' ? field : index.toString();\n            formData.append(fieldName, file, file.name)\n        });\n        return formData\n    }\n\n    _convertModelToFormData(value, formData, namespace) {\n        if (value !== undefined) {\n            if (value instanceof Date) {\n                formData.append(namespace, value.toISOString());\n            } else if (this._isAListOfFiles(value)) {\n                this._addFilesToData(value, namespace, formData);\n            } else if (value instanceof Array) {\n                this._addListToData(value, namespace, formData);\n            } else if (typeof value === 'object' && !(value instanceof File)) {\n                for (let propertyName in value) {\n                    this._convertModelToFormData(value[propertyName], formData, namespace ? `${namespace}[${propertyName}]` : propertyName);\n                }\n            } else if (value instanceof File) {\n                formData.append(namespace, value, value.name)\n            } else {\n                formData.append(namespace, value.toString());\n            }\n        }\n        return formData;\n    }\n}\n\nclass JsonEncoder extends Encoder {\n    accepts(mimeType) {\n        return mimeType === 'application/json'\n    }\n\n    headers() {\n        return {'Content-Type': 'application/json'}\n    }\n\n    encode(requestBody) {\n        return JSON.stringify(requestBody);\n    }\n}\n\nexport default RemoteRequester;"],"mappings":"AAAA,SAAQA,SAAS,QAAO,aAAa;AACrC,SAAQC,uBAAuB,QAAO,uDAAuD;AAE7F,MAAMC,eAAe,SAASF,SAAS,CAAC;EACpCG,WAAWA,CAACC,GAAG,EAAEC,oBAAoB,EAAE;IACnC,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,QAAQ,GAAGF,GAAG;IACnB,IAAI,CAACG,qBAAqB,GAAGF,oBAAoB;EACrD;EAEAG,IAAIA,CAAC;IAACC,QAAQ;IAAEC,IAAI,GAAGC;EAAS,CAAC,EAAE;IAC/B,MAAMC,OAAO,GAAG,IAAI,CAACC,aAAa,CAACJ,QAAQ,EAAEC,IAAI,CAAC;IAClD,IAAIN,GAAG,GAAGK,QAAQ,CAACL,GAAG,CAAC,CAAC;IACxB,IAAIK,QAAQ,CAACK,WAAW,CAAC,CAAC,IAAIJ,IAAI,EAAE;MAChCN,GAAG,IAAI,GAAG,GAAG,IAAI,CAACW,kBAAkB,CAACL,IAAI,CAAC;IAC9C;IAEA,OAAOM,KAAK,CAAC,IAAI,CAACV,QAAQ,GAAGF,GAAG,EAAEQ,OAAO,CAAC,CAACK,IAAI,CAACC,MAAM,IAAI;MACtD,OAAOA,MAAM,CAACC,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACGF,IAAI,CAACG,eAAe,IAAI;MACrB,OAAO,IAAI,CAACC,cAAc,CAACD,eAAe,EAAEX,QAAQ,CAAC;IACzD,CAAC,CAAC;EACV;EAEAI,aAAaA,CAACJ,QAAQ,EAAEC,IAAI,EAAE;IAC1B,IAAIY,OAAO,GAAG,IAAI,CAACC,gBAAgB,CAACd,QAAQ,CAAC;IAC7C,IAAIe,cAAc,GAAG;MACjBC,MAAM,EAAEhB,QAAQ,CAACgB,MAAM,CAAC,CAAC;MACzBH,OAAO,EAAEA,OAAO;MAChBI,WAAW,EAAE,SAAS,CAAE;IAC5B,CAAC;;IAED,IAAIjB,QAAQ,CAACgB,MAAM,CAAC,CAAC,KAAK,KAAK,EAAE;MAC7B,IAAIE,OAAO,GAAG,IAAI,CAACC,WAAW,CAACnB,QAAQ,CAACoB,WAAW,CAAC,CAAC,CAAC;MACtDC,MAAM,CAACC,MAAM,CAACT,OAAO,EAAEK,OAAO,CAACL,OAAO,CAAC,CAAC,CAAC;MACzCQ,MAAM,CAACC,MAAM,CAACP,cAAc,EAAE;QAACQ,IAAI,EAAEL,OAAO,CAACM,MAAM,CAACvB,IAAI;MAAC,CAAC,CAAC;IAC/D;IAEA,OAAOc,cAAc;EACzB;EAEAH,cAAcA,CAACa,YAAY,EAAEzB,QAAQ,EAAE;IACnC,MAAM0B,6BAA6B,GAAG1B,QAAQ,CAAC2B,SAAS,CAAC,CAAC;IAC1D,KAAK,IAAIC,YAAY,IAAIF,6BAA6B,EAAE;MACpD,IAAIE,YAAY,CAACC,cAAc,CAACJ,YAAY,CAAC,EAAE;QAC3C,OAAO,IAAIG,YAAY,CAACH,YAAY,CAAC;MACzC;IACJ;IACA,OAAO,IAAIjC,uBAAuB,CAACiC,YAAY,CAAC;EACpD;EAEAX,gBAAgBA,CAACd,QAAQ,EAAE;IACvB,IAAIa,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIb,QAAQ,CAACoB,WAAW,CAAC,CAAC,IAAIpB,QAAQ,CAACoB,WAAW,CAAC,CAAC,KAAK,qBAAqB,EAAE;MAC5EP,OAAO,CAAC,cAAc,CAAC,GAAGb,QAAQ,CAACoB,WAAW,CAAC,CAAC;IACpD;IAEA,IAAIpB,QAAQ,CAAC8B,kBAAkB,CAAC,CAAC,EAAE;MAC/BjB,OAAO,CAAC,eAAe,CAAC,GAAG,QAAQ,GAAG,IAAI,CAACf,qBAAqB,CAACiC,KAAK,CAAC,CAAC;IAC5E;IAEA,OAAOlB,OAAO;EAClB;EAEAP,kBAAkBA,CAACL,IAAI,EAAE;IACrB,IAAI+B,aAAa,GAAG,EAAE;IACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,MAAM,CAACa,IAAI,CAACjC,IAAI,CAAC,CAACkC,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;MAClD,IAAIG,GAAG,GAAGf,MAAM,CAACa,IAAI,CAACjC,IAAI,CAAC,CAACgC,CAAC,CAAC;MAC9B,IAAII,KAAK,GAAGhB,MAAM,CAACiB,MAAM,CAACrC,IAAI,CAAC,CAACgC,CAAC,CAAC;MAClCD,aAAa,CAACO,IAAI,CAAE,GAAEC,kBAAkB,CAACJ,GAAG,CAAE,IAAGI,kBAAkB,CAACH,KAAK,CAAE,EAAC,CAAC;IACjF;IACA,OAAOL,aAAa,CAACS,IAAI,CAAC,GAAG,CAAC;EAClC;EAEAtB,WAAWA,CAACC,WAAW,EAAE;IACrB,IAAIsB,QAAQ,GAAG,CAAC,IAAIC,WAAW,CAAC,CAAC,EAAE,IAAIC,gBAAgB,CAAC,CAAC,CAAC;IAC1D,OAAOF,QAAQ,CAACG,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,OAAO,CAAC3B,WAAW,CAAC,CAAC;EACzD;AACJ;AAEA,MAAM4B,OAAO,CAAC;EACVD,OAAOA,CAACE,QAAQ,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACvD;EAEArC,OAAOA,CAAA,EAAG;IACN,MAAM,IAAIqC,KAAK,CAAC,kCAAkC,CAAC;EACvD;EAEA1B,MAAMA,CAAC2B,WAAW,EAAE;IAChB,MAAM,IAAID,KAAK,CAAC,kCAAkC,CAAC;EACvD;AACJ;AAEA,MAAMN,gBAAgB,SAASI,OAAO,CAAC;EACnCD,OAAOA,CAACE,QAAQ,EAAE;IACd,OAAOA,QAAQ,KAAK,qBAAqB;EAC7C;EAEApC,OAAOA,CAAA,EAAG;IACN,OAAO,CAAC,CAAC;EACb;EAEAW,MAAMA,CAAC2B,WAAW,EAAE;IAChB,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC7B,IAAI,CAACC,uBAAuB,CAACH,WAAW,EAAEC,QAAQ,EAAE,EAAE,CAAC;IACvD,OAAOA,QAAQ;EACnB;EAEAG,QAAQA,CAAClB,KAAK,EAAE;IACZ,OAAOmB,KAAK,CAACC,OAAO,CAACpB,KAAK,CAAC;EAC/B;EAEAqB,eAAeA,CAACrB,KAAK,EAAE;IACnB,OAAO,IAAI,CAACkB,QAAQ,CAAClB,KAAK,CAAC,IAAIA,KAAK,CAACsB,KAAK,CAAEC,cAAc,IAAKA,cAAc,YAAYC,IAAI,CAAC;EAClG;EAEAC,cAAcA,CAACC,KAAK,EAAEC,KAAK,EAAEZ,QAAQ,EAAE;IACnC;IACA;IACA;IACA;IACAA,QAAQ,CAACa,MAAM,CAACD,KAAK,EAAEE,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;IAC7C,OAAOX,QAAQ;EACnB;EAEAgB,eAAeA,CAACC,KAAK,EAAEL,KAAK,EAAEZ,QAAQ,EAAE;IACpCiB,KAAK,CAACC,OAAO,CAAE,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC5B,MAAMC,SAAS,GAAGT,KAAK,KAAK,EAAE,GAAGA,KAAK,GAAGQ,KAAK,CAACE,QAAQ,CAAC,CAAC;MACzDtB,QAAQ,CAACa,MAAM,CAACQ,SAAS,EAAEF,IAAI,EAAEA,IAAI,CAACI,IAAI,CAAC;IAC/C,CAAC,CAAC;IACF,OAAOvB,QAAQ;EACnB;EAEAE,uBAAuBA,CAACjB,KAAK,EAAEe,QAAQ,EAAEwB,SAAS,EAAE;IAChD,IAAIvC,KAAK,KAAKnC,SAAS,EAAE;MACrB,IAAImC,KAAK,YAAYwC,IAAI,EAAE;QACvBzB,QAAQ,CAACa,MAAM,CAACW,SAAS,EAAEvC,KAAK,CAACyC,WAAW,CAAC,CAAC,CAAC;MACnD,CAAC,MAAM,IAAI,IAAI,CAACpB,eAAe,CAACrB,KAAK,CAAC,EAAE;QACpC,IAAI,CAAC+B,eAAe,CAAC/B,KAAK,EAAEuC,SAAS,EAAExB,QAAQ,CAAC;MACpD,CAAC,MAAM,IAAIf,KAAK,YAAYmB,KAAK,EAAE;QAC/B,IAAI,CAACM,cAAc,CAACzB,KAAK,EAAEuC,SAAS,EAAExB,QAAQ,CAAC;MACnD,CAAC,MAAM,IAAI,OAAOf,KAAK,KAAK,QAAQ,IAAI,EAAEA,KAAK,YAAYwB,IAAI,CAAC,EAAE;QAC9D,KAAK,IAAIkB,YAAY,IAAI1C,KAAK,EAAE;UAC5B,IAAI,CAACiB,uBAAuB,CAACjB,KAAK,CAAC0C,YAAY,CAAC,EAAE3B,QAAQ,EAAEwB,SAAS,GAAI,GAAEA,SAAU,IAAGG,YAAa,GAAE,GAAGA,YAAY,CAAC;QAC3H;MACJ,CAAC,MAAM,IAAI1C,KAAK,YAAYwB,IAAI,EAAE;QAC9BT,QAAQ,CAACa,MAAM,CAACW,SAAS,EAAEvC,KAAK,EAAEA,KAAK,CAACsC,IAAI,CAAC;MACjD,CAAC,MAAM;QACHvB,QAAQ,CAACa,MAAM,CAACW,SAAS,EAAEvC,KAAK,CAACqC,QAAQ,CAAC,CAAC,CAAC;MAChD;IACJ;IACA,OAAOtB,QAAQ;EACnB;AACJ;AAEA,MAAMT,WAAW,SAASK,OAAO,CAAC;EAC9BD,OAAOA,CAACE,QAAQ,EAAE;IACd,OAAOA,QAAQ,KAAK,kBAAkB;EAC1C;EAEApC,OAAOA,CAAA,EAAG;IACN,OAAO;MAAC,cAAc,EAAE;IAAkB,CAAC;EAC/C;EAEAW,MAAMA,CAAC2B,WAAW,EAAE;IAChB,OAAOe,IAAI,CAACC,SAAS,CAAChB,WAAW,CAAC;EACtC;AACJ;AAEA,eAAe1D,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}